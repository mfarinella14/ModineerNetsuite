{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "modineerworkspace"
		},
		"GloviaData_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'GloviaData'"
		},
		"HTM_NetSuite_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'HTM_NetSuite'"
		},
		"Legacy HTM Netsuite Refresh Token_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'Legacy HTM Netsuite Refresh Token'"
		},
		"ModineerSQLPool_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ModineerSQLPool'"
		},
		"ModineerTableStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ModineerTableStorage'"
		},
		"NetsuiteODBC_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'NetsuiteODBC'"
		},
		"NetsuiteODBC_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'NetsuiteODBC'"
		},
		"PlexODBC_LS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'PlexODBC_LS'"
		},
		"modineerworkspace-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'modineerworkspace-WorkspaceDefaultSqlServer'"
		},
		"HTM_NetSuite_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://3675944.restlets.api.netsuite.com"
		},
		"HTM_NetSuite_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "228ec78c8e0232dce7bb92d461600c6f78ae03778e6e1aa272d5162312799e4a"
		},
		"Legacy HTM Netsuite Refresh Token_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{concat('https://',linkedService().account_id,'.suitetalk.api.netsuite.com/services/rest/auth/oauth2/v1/token')}"
		},
		"Legacy HTM Netsuite Refresh Token_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "d0d192e2ea6cd632f5b5775a77df8351e1f9af463f9be2bb5c4310a94b6ca6d2"
		},
		"Netsuite SuiteQL_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://3675944.suitetalk.api.netsuite.com/services/rest/query/v1/suiteql"
		},
		"NetsuiteODBC_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "mfarinella@modineer.com"
		},
		"NetsuiteUnAuthorized_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://4828307.app.netsuite.com/core/media/"
		},
		"modineerlake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://modineerlake.dfs.core.windows.net/"
		},
		"modineerworkspace-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://modineerlake.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Data Merge')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Merge SP After Table Created",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "Modineer",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[Config].[usp_MergeData]",
							"storedProcedureParameters": {
								"KeyColumns": {
									"value": {
										"value": "@{pipeline().parameters.item.TableKeysArray}",
										"type": "Expression"
									},
									"type": "String"
								},
								"SchemaName": {
									"value": {
										"value": "@{pipeline().parameters.item.SchemaName}",
										"type": "Expression"
									},
									"type": "String"
								},
								"TableName": {
									"value": {
										"value": "@{pipeline().parameters.item.TableName}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					},
					{
						"name": "Insert Delta Data To Production",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Merge SP After Table Created",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlDWSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSynapseDatabase",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.item.TableName",
										"type": "Expression"
									},
									"DbName": {
										"value": "@pipeline().parameters.item.DbName",
										"type": "Expression"
									},
									"SchemaName": "Delta"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSynapseDatabase",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.item.TableName",
										"type": "Expression"
									},
									"DbName": {
										"value": "@pipeline().parameters.item.DbName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.item.SchemaName",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"item": {
						"type": "object"
					},
					"DateData": {
						"type": "object"
					}
				},
				"folder": {
					"name": "Master Data/Slave Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/Modineer')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Data Refresh Delta')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Refresh Tables",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get EST Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlPoolSource",
								"sqlReaderStoredProcedureName": "[Config].[DataRefresh]",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "Modineer",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Refresh Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Refresh Tables').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "Switch on RowGroup",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set Table as Updating",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().RowGroup",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "GloviaProd",
												"activities": [
													{
														"name": "Get SCN Number",
														"type": "Lookup",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "OracleSource",
																"oracleReaderQuery": {
																	"value": "@concat('SELECT MAX(ORA_ROWSCN) AS \"SCNValue\" FROM ',item().SchemaName,'.',item().TableName)",
																	"type": "Expression"
																},
																"partitionOption": "None",
																"queryTimeout": "02:00:00"
															},
															"dataset": {
																"referenceName": "GloviaProd",
																"type": "DatasetReference",
																"parameters": {
																	"tablename": {
																		"value": "@item().TableName",
																		"type": "Expression"
																	},
																	"schemaname": {
																		"value": "@item().SchemaName",
																		"type": "Expression"
																	}
																}
															}
														}
													},
													{
														"name": "Update SCN",
														"type": "SqlPoolStoredProcedure",
														"dependsOn": [
															{
																"activity": "Get SCN Number",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"sqlPool": {
															"referenceName": "Modineer",
															"type": "SqlPoolReference"
														},
														"typeProperties": {
															"storedProcedureName": "[Config].[UpdateSCN]",
															"storedProcedureParameters": {
																"Id": {
																	"value": {
																		"value": "@item().Id",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"SCN": {
																	"value": {
																		"value": "@activity('Get SCN Number').output.firstRow.SCNValue",
																		"type": "Expression"
																	},
																	"type": "Int64"
																}
															}
														}
													},
													{
														"name": "Glovia Raw Data Copy - ADLS2",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Update SCN",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": true,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{item().SchemaName}.@{item().TableName}"
															},
															{
																"name": "Destination",
																"value": "@{item().FileSystem}/@{concat(item().SchemaName, '/', item().TableName, '/', activity('Get EST Date').output.firstRow.Year, '/', activity('Get EST Date').output.firstRow.Month, '/', activity('Get EST Date').output.firstRow.Day)}/@{concat(item().TableName, '-', activity('Get EST Date').output.firstRow.EST)}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "OracleSource",
																"oracleReaderQuery": {
																	"value": "SELECT * FROM @{item().SchemaName}.@{item().TableName} VERSIONS BETWEEN TIMESTAMP TO_TIMESTAMP(REPLACE(REPLACE('@{addminutes(item().LastRefreshStart,-15)}','T',' '),'Z',''), 'YYYY-MM-DD HH24:MI:SS.FF') AND CURRENT_TIMESTAMP WHERE versions_operation IN ('D','U','I') AND versions_endtime IS NULL",
																	"type": "Expression"
																},
																"partitionOption": "None",
																"queryTimeout": "02:00:00"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "GloviaProd",
																"type": "DatasetReference",
																"parameters": {
																	"tablename": {
																		"value": "@item().TableName",
																		"type": "Expression"
																	},
																	"schemaname": {
																		"value": "@item().SchemaName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "SinkParquet",
																"type": "DatasetReference",
																"parameters": {
																	"file_system": {
																		"value": "@item().FileSystem",
																		"type": "Expression"
																	},
																	"directory": {
																		"value": "@{item().SchemaName}/@{item().TableName}/@{activity('Get EST Date').output.firstRow.Year}/@{activity('Get EST Date').output.firstRow.Month}/@{activity('Get EST Date').output.firstRow.Day}",
																		"type": "Expression"
																	},
																	"file_name": {
																		"value": "@{item().TableName}-@{activity('Get EST Date').output.firstRow.EST}.parquet",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Glovia Raw Data Copy - SQL Pool",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Update SCN",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": true,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{item().SchemaName}.@{item().TableName}"
															},
															{
																"name": "Destination",
																"value": "@{'Delta'}.@{item().TableName}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "OracleSource",
																"oracleReaderQuery": {
																	"value": "SELECT * FROM @{item().SchemaName}.@{item().TableName} VERSIONS BETWEEN TIMESTAMP TO_TIMESTAMP(REPLACE(REPLACE('@{addminutes(item().LastRefreshStart,-15)}','T',' '),'Z',''), 'YYYY-MM-DD HH24:MI:SS.FF') AND CURRENT_TIMESTAMP WHERE versions_operation IN ('D','U','I') AND versions_endtime IS NULL",
																	"type": "Expression"
																},
																"partitionOption": "None",
																"queryTimeout": "02:00:00"
															},
															"sink": {
																"type": "SqlDWSink",
																"preCopyScript": {
																	"value": "TRUNCATE TABLE Delta.@{item().TableName}",
																	"type": "Expression"
																},
																"tableOption": "autoCreate",
																"disableMetricsCollection": false
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "GloviaProd",
																"type": "DatasetReference",
																"parameters": {
																	"tablename": {
																		"value": "@item().TableName",
																		"type": "Expression"
																	},
																	"schemaname": {
																		"value": "@item().SchemaName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "AzureSynapseDatabase",
																"type": "DatasetReference",
																"parameters": {
																	"TableName": {
																		"value": "@item().TableName",
																		"type": "Expression"
																	},
																	"DbName": {
																		"value": "@item().DbName",
																		"type": "Expression"
																	},
																	"SchemaName": "Delta"
																}
															}
														]
													},
													{
														"name": "Glovia Create Table Or Merge Data",
														"type": "ExecutePipeline",
														"dependsOn": [
															{
																"activity": "Glovia Raw Data Copy - SQL Pool",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "Data Merge",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"item": {
																	"value": "@item()",
																	"type": "Expression"
																},
																"DateData": {
																	"value": "@activity('Get EST Date').output.firstRow",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "Netsuite",
												"activities": [
													{
														"name": "Execute Netsuite Data Refresh",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "Netsuite Data Refresh",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"item": {
																	"value": "@item()",
																	"type": "Expression"
																},
																"EstDate": {
																	"value": "@activity('Get EST Date').output.firstRow",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "Plex",
												"activities": [
													{
														"name": "Plex Data Refresh",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "Plex Data Refresh - Data Count",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"item": {
																	"value": "@item()",
																	"type": "Expression"
																},
																"EstDate": {
																	"value": "@activity('Get EST Date').output",
																	"type": "Expression"
																}
															}
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Place Holder",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										]
									}
								},
								{
									"name": "Set Table as Updating",
									"type": "SqlPoolStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"sqlPool": {
										"referenceName": "Modineer",
										"type": "SqlPoolReference"
									},
									"typeProperties": {
										"storedProcedureName": "[Config].[SetAsUpdating]",
										"storedProcedureParameters": {
											"nextRefresh": {
												"value": {
													"value": "@addToTime(utcnow(),item().RefreshNumber,item().RefreshInterval)",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"rowId": {
												"value": {
													"value": "@item().Id",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									}
								},
								{
									"name": "Set Table to Processed",
									"type": "SqlPoolStoredProcedure",
									"dependsOn": [
										{
											"activity": "Switch on RowGroup",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"sqlPool": {
										"referenceName": "Modineer",
										"type": "SqlPoolReference"
									},
									"typeProperties": {
										"storedProcedureName": "[Config].[SetAsUpdated]",
										"storedProcedureParameters": {
											"rowId": {
												"value": {
													"value": "@item().Id",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									}
								},
								{
									"name": "Failed To Update",
									"type": "SqlPoolStoredProcedure",
									"dependsOn": [
										{
											"activity": "Switch on RowGroup",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"sqlPool": {
										"referenceName": "Modineer",
										"type": "SqlPoolReference"
									},
									"typeProperties": {
										"storedProcedureName": "[Config].[FailedToUpdate]",
										"storedProcedureParameters": {
											"RowId": {
												"value": {
													"value": "@item().Id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"RowSCN": {
												"value": {
													"value": "@item().TableMaxSCN",
													"type": "Expression"
												},
												"type": "Int64"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Get EST Date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlPoolSource",
								"sqlReaderStoredProcedureName": "[Config].[usp_GetESTDate]",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "Modineer",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Master Data"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-12T20:33:37Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Modineer')]",
				"[concat(variables('workspaceId'), '/sqlPools/Modineer')]",
				"[concat(variables('workspaceId'), '/datasets/GloviaProd')]",
				"[concat(variables('workspaceId'), '/datasets/SinkParquet')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseDatabase')]",
				"[concat(variables('workspaceId'), '/pipelines/Data Merge')]",
				"[concat(variables('workspaceId'), '/pipelines/Netsuite Data Refresh')]",
				"[concat(variables('workspaceId'), '/pipelines/Plex Data Refresh - Data Count')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Data Refresh')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Refresh Tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlPoolSource",
								"sqlReaderStoredProcedureName": "[Config].[DataRefresh]",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "Modineer",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Refresh Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Refresh Tables').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "Switch on RowGroup",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set Table as Updating_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().RowGroup",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "GloviaProd",
												"activities": [
													{
														"name": "Get SCN Number",
														"type": "Lookup",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "OracleSource",
																"oracleReaderQuery": {
																	"value": "@concat('SELECT MAX(ORA_ROWSCN) AS \"SCNValue\" FROM ',item().SchemaName,'.',item().TableName)",
																	"type": "Expression"
																},
																"partitionOption": "None",
																"queryTimeout": "02:00:00"
															},
															"dataset": {
																"referenceName": "GloviaProd",
																"type": "DatasetReference",
																"parameters": {
																	"tablename": {
																		"value": "@item().TableName",
																		"type": "Expression"
																	},
																	"schemaname": {
																		"value": "@item().SchemaName",
																		"type": "Expression"
																	}
																}
															}
														}
													},
													{
														"name": "Update SCN",
														"type": "SqlPoolStoredProcedure",
														"dependsOn": [
															{
																"activity": "Get SCN Number",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"sqlPool": {
															"referenceName": "Modineer",
															"type": "SqlPoolReference"
														},
														"typeProperties": {
															"storedProcedureName": "[Config].[UpdateSCN]",
															"storedProcedureParameters": {
																"Id": {
																	"value": {
																		"value": "@item().Id",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"SCN": {
																	"value": {
																		"value": "@activity('Get SCN Number').output.firstRow.SCNValue",
																		"type": "Expression"
																	},
																	"type": "Int64"
																}
															}
														}
													},
													{
														"name": "Raw Data Copy",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Update SCN",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": true,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "OracleSource",
																"partitionOption": "None",
																"queryTimeout": "02:00:00"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "GloviaProd",
																"type": "DatasetReference",
																"parameters": {
																	"tablename": {
																		"value": "@item().TableName",
																		"type": "Expression"
																	},
																	"schemaname": {
																		"value": "@item().SchemaName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "SinkParquet",
																"type": "DatasetReference",
																"parameters": {
																	"file_system": {
																		"value": "@item().FileSystem",
																		"type": "Expression"
																	},
																	"directory": {
																		"value": "@concat(item().SchemaName,'/',item().TableName)",
																		"type": "Expression"
																	},
																	"file_name": {
																		"value": "@concat(item().TableName,'.parquet')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Set Table to Processed",
														"type": "SqlPoolStoredProcedure",
														"dependsOn": [
															{
																"activity": "Raw Data Copy",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"sqlPool": {
															"referenceName": "Modineer",
															"type": "SqlPoolReference"
														},
														"typeProperties": {
															"storedProcedureName": "[Config].[SetAsUpdated]",
															"storedProcedureParameters": {
																"rowId": {
																	"value": {
																		"value": "@item().Id",
																		"type": "Expression"
																	},
																	"type": "Int32"
																}
															}
														}
													},
													{
														"name": "Failed To Update",
														"type": "SqlPoolStoredProcedure",
														"dependsOn": [
															{
																"activity": "Raw Data Copy",
																"dependencyConditions": [
																	"Failed"
																]
															},
															{
																"activity": "Update SCN",
																"dependencyConditions": [
																	"Failed"
																]
															},
															{
																"activity": "Get SCN Number",
																"dependencyConditions": [
																	"Failed"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"sqlPool": {
															"referenceName": "Modineer",
															"type": "SqlPoolReference"
														},
														"typeProperties": {
															"storedProcedureName": "[Config].[FailedToUpdate]",
															"storedProcedureParameters": {
																"RowId": {
																	"value": {
																		"value": "@item().Id",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"RowSCN": {
																	"value": {
																		"value": "@item().TableMaxSCN",
																		"type": "Expression"
																	},
																	"type": "Int32"
																}
															}
														}
													}
												]
											},
											{
												"value": "Netsuite",
												"activities": [
													{
														"name": "Execute Netsuite Data Refresh",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "Netsuite Data Refresh",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"item": {
																	"value": "@item()",
																	"type": "Expression"
																}
															}
														}
													},
													{
														"name": "Set as Updated",
														"type": "SqlPoolStoredProcedure",
														"dependsOn": [
															{
																"activity": "Execute Netsuite Data Refresh",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"sqlPool": {
															"referenceName": "Modineer",
															"type": "SqlPoolReference"
														},
														"typeProperties": {
															"storedProcedureName": "[Config].[SetAsUpdated]",
															"storedProcedureParameters": {
																"rowId": {
																	"value": {
																		"value": "@item().Id",
																		"type": "Expression"
																	},
																	"type": "Int32"
																}
															}
														}
													},
													{
														"name": "Failed",
														"type": "SqlPoolStoredProcedure",
														"dependsOn": [
															{
																"activity": "Execute Netsuite Data Refresh",
																"dependencyConditions": [
																	"Failed"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"sqlPool": {
															"referenceName": "Modineer",
															"type": "SqlPoolReference"
														},
														"typeProperties": {
															"storedProcedureName": "[Config].[FailedToUpdate]",
															"storedProcedureParameters": {
																"RowId": {
																	"value": {
																		"value": "@item().Id",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"RowSCN": {
																	"value": "0",
																	"type": "Int32"
																}
															}
														}
													}
												]
											},
											{
												"value": "Plex",
												"activities": [
													{
														"name": "Place Holder_copy2",
														"type": "Wait",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"waitTimeInSeconds": 1
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Place Holder",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										]
									}
								},
								{
									"name": "Set Table as Updating_copy1",
									"type": "SqlPoolStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"sqlPool": {
										"referenceName": "Modineer",
										"type": "SqlPoolReference"
									},
									"typeProperties": {
										"storedProcedureName": "[Config].[SetAsUpdating]",
										"storedProcedureParameters": {
											"interval": {
												"value": {
													"value": "@item().RefreshInterval",
													"type": "Expression"
												},
												"type": "String"
											},
											"intervalQty": {
												"value": {
													"value": "@item().RefreshNumber",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"nextRefresh": {
												"value": {
													"value": "@item().NextRefresh",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"rowId": {
												"value": {
													"value": "@item().Id",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Master Data"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-12T20:33:37Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Modineer')]",
				"[concat(variables('workspaceId'), '/sqlPools/Modineer')]",
				"[concat(variables('workspaceId'), '/datasets/GloviaProd')]",
				"[concat(variables('workspaceId'), '/datasets/SinkParquet')]",
				"[concat(variables('workspaceId'), '/pipelines/Netsuite Data Refresh')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Data Refresh_copy1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Refresh Tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlPoolSource",
								"sqlReaderStoredProcedureName": "[Config].[DataRefresh]",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "Modineer",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Refresh Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Refresh Tables').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 4,
							"activities": [
								{
									"name": "Switch on RowGroup",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().RowGroup",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "GloviaProd",
												"activities": [
													{
														"name": "Get SCN Number",
														"type": "Lookup",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "OracleSource",
																"oracleReaderQuery": {
																	"value": "@concat('SELECT MAX(ORA_ROWSCN) AS \"SCNValue\" FROM ',item().SchemaName,'.',item().TableName)",
																	"type": "Expression"
																},
																"partitionOption": "None",
																"queryTimeout": "02:00:00"
															},
															"dataset": {
																"referenceName": "GloviaProd",
																"type": "DatasetReference",
																"parameters": {
																	"tablename": {
																		"value": "@item().TableName",
																		"type": "Expression"
																	},
																	"schemaname": {
																		"value": "@item().SchemaName",
																		"type": "Expression"
																	}
																}
															}
														}
													},
													{
														"name": "Set Table as Updating",
														"type": "SqlPoolStoredProcedure",
														"dependsOn": [
															{
																"activity": "Get SCN Number",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"sqlPool": {
															"referenceName": "Modineer",
															"type": "SqlPoolReference"
														},
														"typeProperties": {
															"storedProcedureName": "[Config].[SetAsUpdating]",
															"storedProcedureParameters": {
																"interval": {
																	"value": {
																		"value": "@item().RefreshInterval",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"intervalQty": {
																	"value": {
																		"value": "@item().RefreshNumber",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"rowId": {
																	"value": {
																		"value": "@item().Id",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"SCN": {
																	"value": {
																		"value": "@activity('Get SCN Number').output.firstRow.SCNValue",
																		"type": "Expression"
																	},
																	"type": "Int64"
																}
															}
														}
													},
													{
														"name": "Raw Data Copy",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Set Table as Updating",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": true,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "OracleSource",
																"oracleReaderQuery": {
																	"value": "@concat('SELECT * FROM ',item().SchemaName,'.',item().TableName,' WHERE ORA_ROWSCN >= ',item().TableMaxSCN)",
																	"type": "Expression"
																},
																"partitionOption": "None",
																"queryTimeout": "02:00:00"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"parallelCopies": 4
														},
														"inputs": [
															{
																"referenceName": "GloviaProd",
																"type": "DatasetReference",
																"parameters": {
																	"tablename": {
																		"value": "@item().TableName",
																		"type": "Expression"
																	},
																	"schemaname": {
																		"value": "@item().SchemaName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "SinkParquet",
																"type": "DatasetReference",
																"parameters": {
																	"file_system": {
																		"value": "@item().FileSystem",
																		"type": "Expression"
																	},
																	"directory": {
																		"value": "@concat(item().SchemaName,'/',item().TableName,'/NotProcessed')",
																		"type": "Expression"
																	},
																	"file_name": {
																		"value": "@concat(item().TableName,'-',convertFromUtc(utcnow(), 'Eastern Standard Time'),'.parquet')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Set Table to Processed",
														"type": "SqlPoolStoredProcedure",
														"dependsOn": [
															{
																"activity": "Dataflow1",
																"dependencyConditions": [
																	"Succeeded"
																]
															},
															{
																"activity": "Raw Data Copy",
																"dependencyConditions": [
																	"Failed"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"sqlPool": {
															"referenceName": "Modineer",
															"type": "SqlPoolReference"
														},
														"typeProperties": {
															"storedProcedureName": "[Config].[SetAsUpdated]",
															"storedProcedureParameters": {
																"rowId": {
																	"value": {
																		"value": "@item().Id",
																		"type": "Expression"
																	},
																	"type": "Int32"
																}
															}
														}
													},
													{
														"name": "Dataflow1",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Raw Data Copy",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "1.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "UpdateSQLTableFromParquet",
																"type": "DataFlowReference",
																"parameters": {
																	"SchemaName": {
																		"value": "@item().SchemaName",
																		"type": "Expression"
																	},
																	"TableName": {
																		"value": "@item().TableName",
																		"type": "Expression"
																	},
																	"KeyColumns": {
																		"value": "item().TableKeysArray",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"NewData": {
																		"FileSystem": {
																			"value": "@item().FileSystem",
																			"type": "Expression"
																		},
																		"FilePath": {
																			"value": "@concat(item().SchemaName,'/',item().TableName,'/NotProcessed')",
																			"type": "Expression"
																		}
																	},
																	"SinkToAzureTable": {}
																}
															},
															"staging": {},
															"compute": {
																"coreCount": 8,
																"computeType": "General"
															},
															"traceLevel": "None",
															"runConcurrently": true,
															"cacheSinks": {
																"firstRowOnly": true
															},
															"continuationSettings": {}
														}
													}
												]
											},
											{
												"value": "Netsuite",
												"activities": [
													{
														"name": "Execute Netsuite Data Refresh",
														"type": "ExecutePipeline",
														"dependsOn": [
															{
																"activity": "Set as Updating",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "Netsuite Data Refresh",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"item": {
																	"value": "@item()",
																	"type": "Expression"
																}
															}
														}
													},
													{
														"name": "Set as Updated",
														"type": "SqlPoolStoredProcedure",
														"dependsOn": [
															{
																"activity": "Execute Netsuite Data Refresh",
																"dependencyConditions": [
																	"Succeeded",
																	"Failed"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"sqlPool": {
															"referenceName": "Modineer",
															"type": "SqlPoolReference"
														},
														"typeProperties": {
															"storedProcedureName": "[Config].[SetAsUpdated]",
															"storedProcedureParameters": {
																"rowId": {
																	"value": {
																		"value": "@item().Id",
																		"type": "Expression"
																	},
																	"type": "Int32"
																}
															}
														}
													},
													{
														"name": "Set as Updating",
														"type": "SqlPoolStoredProcedure",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"sqlPool": {
															"referenceName": "Modineer",
															"type": "SqlPoolReference"
														},
														"typeProperties": {
															"storedProcedureName": "[Config].[SetAsUpdating]",
															"storedProcedureParameters": {
																"interval": {
																	"value": {
																		"value": "@item().RefreshInterval",
																		"type": "Expression"
																	},
																	"type": "String"
																},
																"intervalQty": {
																	"value": {
																		"value": "@item().RefreshNumber",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"rowId": {
																	"value": {
																		"value": "@item().Id",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"SCN": {
																	"value": "0",
																	"type": "Int64"
																}
															}
														}
													}
												]
											},
											{
												"value": "Plex",
												"activities": [
													{
														"name": "Place Holder_copy2",
														"type": "Wait",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"waitTimeInSeconds": 1
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Place Holder",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Serverless Setup"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-12T20:33:37Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Modineer')]",
				"[concat(variables('workspaceId'), '/datasets/GloviaProd')]",
				"[concat(variables('workspaceId'), '/sqlPools/Modineer')]",
				"[concat(variables('workspaceId'), '/datasets/SinkParquet')]",
				"[concat(variables('workspaceId'), '/dataflows/UpdateSQLTableFromParquet')]",
				"[concat(variables('workspaceId'), '/pipelines/Netsuite Data Refresh')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataRails')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "SqlDWSink",
								"allowCopyCommand": true,
								"copyCommandSettings": {}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "modineerworkspace-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"path": "unified-data-cluster/GLOVIA_PROD/FIM_BL"
							},
							"parallelCopies": 5
						},
						"inputs": [
							{
								"referenceName": "GloviaProd",
								"type": "DatasetReference",
								"parameters": {
									"tablename": "FIM_BL",
									"schemaname": "GLOVIA_PROD"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSynapseDatabase",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "FIM_BL",
									"DbName": "Modineer",
									"SchemaName": "GLOVIA_PROD"
								}
							}
						]
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "SELECT * FROM transaction WHERE lastmodifieddate >= TO_TIMESTAMP(REPLACE(REPLACE('2021-12-15T13:01:21.96Z','T',' '),'Z',''), 'YYYY-MM-DD HH24:MI:SS.FF')",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "NetsuiteODBCSource",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Temp"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/GloviaProd')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseDatabase')]",
				"[concat(variables('workspaceId'), '/datasets/NetsuiteODBCSource')]",
				"[concat(variables('workspaceId'), '/linkedServices/modineerworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Initial Table Setup')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Raw Data Copy - ADLS2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get EST Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "@{variables('SchemaName')}.@{variables('TableName')}"
							},
							{
								"name": "Destination",
								"value": "@{'unified-data-cluster'}/@{concat(variables('SchemaName'), '/', variables('TableName'), '/', activity('Get EST Date').output.firstRow.Year, '/', activity('Get EST Date').output.firstRow.Month, '/', activity('Get EST Date').output.firstRow.Day)}/@{concat(variables('TableName'), '-', activity('Get EST Date').output.firstRow.EST)}"
							}
						],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "PlexODBC",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": {
										"value": "@variables('SchemaName')",
										"type": "Expression"
									},
									"TableName": {
										"value": "@variables('TableName')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkParquet",
								"type": "DatasetReference",
								"parameters": {
									"file_system": "unified-data-cluster",
									"directory": {
										"value": "@{variables('SchemaName')}/@{variables('TableName')}/@{activity('Get EST Date').output.firstRow.Year}/@{activity('Get EST Date').output.firstRow.Month}/@{activity('Get EST Date').output.firstRow.Day}",
										"type": "Expression"
									},
									"file_name": {
										"value": "@{variables('TableName')}-@{activity('Get EST Date').output.firstRow.EST}",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Get EST Date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy From File Cabinet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlPoolSource",
								"sqlReaderStoredProcedureName": "[Config].[usp_GetESTDate]",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "Modineer",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy From File Cabinet",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"allowCopyCommand": true,
								"copyCommandSettings": {},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "modineerlake",
									"type": "LinkedServiceReference"
								},
								"path": "unified-data-cluster/ModNS/HTMYearEndTanks2021"
							}
						},
						"inputs": [
							{
								"referenceName": "NetsuiteFileCabinet",
								"type": "DatasetReference",
								"parameters": {
									"RelativeURL": "media.nl?id=322577&c=4828307&h=Fpjz5UOxwrITMIyCEEUEJNj0x6CemS9HaJp8I-rmKWLRZRBT&_xt=.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSynapseDatabase",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "HTMYearEndTanks2021",
									"DbName": "Modineer",
									"SchemaName": "ModNS"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"TableName": {
						"type": "String",
						"defaultValue": "Common_v_Supplier_e"
					},
					"SchemaName": {
						"type": "String",
						"defaultValue": "Plex"
					}
				},
				"folder": {
					"name": "Temp"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/PlexODBC')]",
				"[concat(variables('workspaceId'), '/datasets/SinkParquet')]",
				"[concat(variables('workspaceId'), '/datasets/Modineer')]",
				"[concat(variables('workspaceId'), '/datasets/NetsuiteFileCabinet')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseDatabase')]",
				"[concat(variables('workspaceId'), '/linkedServices/modineerlake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Netsuite Data Refresh')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Data Import Type",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.item.ConnectionType",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "ODBC",
									"activities": [
										{
											"name": "Modineer Netsuite ODBC Copy",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "OdbcSource",
													"query": {
														"value": "@pipeline().parameters.item.DataQuery",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "SqlDWSink",
													"preCopyScript": {
														"value": "@{pipeline().parameters.item.PreCopySql}",
														"type": "Expression"
													},
													"disableMetricsCollection": false
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "modineerlake",
														"type": "LinkedServiceReference"
													}
												},
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "NetsuiteODBCSource",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "AzureSynapseDatabase",
													"type": "DatasetReference",
													"parameters": {
														"TableName": {
															"value": "@pipeline().parameters.item.TableName",
															"type": "Expression"
														},
														"DbName": {
															"value": "@pipeline().parameters.item.DbName",
															"type": "Expression"
														},
														"SchemaName": {
															"value": "@pipeline().parameters.item.SchemaName",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "WEB",
									"activities": [
										{
											"name": "Copy From File Cabinet",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "RestSource",
													"httpRequestTimeout": "00:01:40",
													"requestInterval": "00.00:00:00.010",
													"requestMethod": "GET",
													"paginationRules": {
														"supportRFC5988": "true"
													}
												},
												"sink": {
													"type": "SqlDWSink",
													"preCopyScript": {
														"value": "@{pipeline().parameters.item.PreCopySql}",
														"type": "Expression"
													},
													"allowCopyCommand": true,
													"copyCommandSettings": {},
													"disableMetricsCollection": false
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "modineerlake",
														"type": "LinkedServiceReference"
													}
												}
											},
											"inputs": [
												{
													"referenceName": "NetsuiteFileCabinet",
													"type": "DatasetReference",
													"parameters": {
														"RelativeURL": {
															"value": "@pipeline().parameters.item.DataQuery",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "AzureSynapseDatabase",
													"type": "DatasetReference",
													"parameters": {
														"TableName": {
															"value": "@pipeline().parameters.item.TableName",
															"type": "Expression"
														},
														"DbName": {
															"value": "@pipeline().parameters.item.DbName",
															"type": "Expression"
														},
														"SchemaName": {
															"value": "@pipeline().parameters.item.SchemaName",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "ODBC2",
									"activities": [
										{
											"name": "Modineer Netsuite Raw Data Copy - Data Lake",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "OdbcSource",
													"query": {
														"value": "SELECT * FROM @{pipeline().parameters.item.TableName} WHERE lastmodifieddate >= TO_TIMESTAMP(REPLACE(REPLACE('@{addminutes(pipeline().parameters.item.LastRefreshStart,-15)}','T',' '),'Z',''), 'YYYY-MM-DD HH24:MI:SS.FF')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "NetsuiteODBCSource",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "SinkParquet",
													"type": "DatasetReference",
													"parameters": {
														"file_system": {
															"value": "@pipeline().parameters.item.FileSystem",
															"type": "Expression"
														},
														"directory": {
															"value": "@{pipeline().parameters.item.SchemaName}/@{pipeline().parameters.item.TableName}/@{pipeline().parameters.EstDate.Year}/@{pipeline().parameters.EstDate.Month}/@{pipeline().parameters.EstDate.Day}",
															"type": "Expression"
														},
														"file_name": {
															"value": "@{pipeline().parameters.item.TableName}[n].parquet",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "Modineer Netsuite Raw Data Copy - SQL Pool",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": true,
												"secureInput": false
											},
											"userProperties": [
												{
													"name": "Source",
													"value": "@{item().SchemaName}.@{item().TableName}"
												},
												{
													"name": "Destination",
													"value": "@{'Delta'}.@{item().TableName}"
												}
											],
											"typeProperties": {
												"source": {
													"type": "OdbcSource",
													"query": {
														"value": "SELECT * FROM @{pipeline().parameters.item.TableName} WHERE lastmodifieddate >= TO_TIMESTAMP(REPLACE(REPLACE('@{addminutes(pipeline().parameters.item.LastRefreshStart,-15)}','T',' '),'Z',''), 'YYYY-MM-DD HH24:MI:SS.FF')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "SqlDWSink",
													"preCopyScript": {
														"value": "TRUNCATE TABLE Delta.@{pipeline().parameters.item.TableName}",
														"type": "Expression"
													},
													"tableOption": "autoCreate",
													"disableMetricsCollection": false
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "NetsuiteODBCSource",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "AzureSynapseDatabase",
													"type": "DatasetReference",
													"parameters": {
														"TableName": {
															"value": "@pipeline().parameters.item.TableName",
															"type": "Expression"
														},
														"DbName": {
															"value": "@pipeline().parameters.item.DbName",
															"type": "Expression"
														},
														"SchemaName": "Delta"
													}
												}
											]
										},
										{
											"name": "Data Merge",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Modineer Netsuite Raw Data Copy - SQL Pool",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "Data Merge",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"item": {
														"value": "@pipeline().parameters.item",
														"type": "Expression"
													},
													"DateData": {
														"value": "@pipeline().parameters.EstDate",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Wait1",
									"description": "This is a placeholder",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"item": {
						"type": "object"
					},
					"EstDate": {
						"type": "object"
					}
				},
				"folder": {
					"name": "Master Data/Slave Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/NetsuiteODBCSource')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseDatabase')]",
				"[concat(variables('workspaceId'), '/datasets/NetsuiteFileCabinet')]",
				"[concat(variables('workspaceId'), '/datasets/SinkParquet')]",
				"[concat(variables('workspaceId'), '/pipelines/Data Merge')]",
				"[concat(variables('workspaceId'), '/linkedServices/modineerlake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Netsuite Data Refresh_copy1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Data Import Type",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.item.ConnectionType",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "ODBC",
									"activities": [
										{
											"name": "Modineer Netsuite ODBC Copy",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "OdbcSource",
													"query": {
														"value": "@pipeline().parameters.item.DataQuery",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "SqlDWSink",
													"preCopyScript": {
														"value": "@{concat('TRUNCATE TABLE ',pipeline().parameters.item.SchemaName,'.',pipeline().parameters.item.TableName)}",
														"type": "Expression"
													},
													"disableMetricsCollection": false
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "NetsuiteODBCSource",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "AzureSynapseDatabase",
													"type": "DatasetReference",
													"parameters": {
														"TableName": {
															"value": "@pipeline().parameters.item.TableName",
															"type": "Expression"
														},
														"DbName": {
															"value": "@pipeline().parameters.item.DbName",
															"type": "Expression"
														},
														"SchemaName": {
															"value": "@pipeline().parameters.item.SchemaName",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Wait1",
									"description": "This is a placeholder",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"item": {
						"type": "object"
					}
				},
				"folder": {
					"name": "Serverless Setup/Slave Pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/NetsuiteODBCSource')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Plex Data Refresh - Data Count')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Connection Type",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.item.ConnectionType",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "ODBC",
									"activities": [
										{
											"name": "Check For Processing",
											"type": "Lookup",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "OdbcSource",
													"query": {
														"value": "SELECT COUNT(*) AS Count FROM @{pipeline().parameters.item.SchemaName}.@{pipeline().parameters.item.TableName} t1 WHERE Updated_Date >= SUBSTRING('@{pipeline().parameters.item.LastRefreshStart}',1,23)",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00"
												},
												"dataset": {
													"referenceName": "PlexODBC",
													"type": "DatasetReference",
													"parameters": {
														"SchemaName": {
															"value": "@pipeline().parameters.item.SchemaName",
															"type": "Expression"
														},
														"TableName": {
															"value": "@pipeline().parameters.item.TableName",
															"type": "Expression"
														}
													}
												}
											}
										},
										{
											"name": "PDR - Process",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Check For Processing",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "Plex Data Refresh - Process",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"item": {
														"value": "@pipeline().parameters.item",
														"type": "Expression"
													},
													"EstDate": {
														"value": "@pipeline().parameters.EstDate",
														"type": "Expression"
													},
													"DataCount": {
														"value": "@activity('Check For Processing').output.firstRow.Count",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Wait2",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"item": {
						"type": "object"
					},
					"EstDate": {
						"type": "object"
					}
				},
				"folder": {
					"name": "Master Data/Slave Pipelines/Plex Data Refresh"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/PlexODBC')]",
				"[concat(variables('workspaceId'), '/pipelines/Plex Data Refresh - Process')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Plex Data Refresh - Process')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Count of Changed Rows",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(pipeline().parameters.DataCount,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Wait1_copy1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Plex Raw Data Copy - SQL Pool",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "@{pipeline().parameters.item.SchemaName}.@{pipeline().parameters.item.TableName}"
										},
										{
											"name": "Destination",
											"value": "@{'Delta'}.@{pipeline().parameters.item.TableName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "OdbcSource",
											"query": {
												"value": "SELECT * FROM @{pipeline().parameters.item.SchemaName}.@{pipeline().parameters.item.TableName} t1 WHERE Updated_Date >= SUBSTRING('@{pipeline().parameters.item.LastRefreshStart}',1,23)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "SqlDWSink",
											"preCopyScript": {
												"value": "TRUNCATE TABLE Delta.@{pipeline().parameters.item.TableName}",
												"type": "Expression"
											},
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "PlexODBC",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": {
													"value": "@pipeline().parameters.item.SchemaName",
													"type": "Expression"
												},
												"TableName": {
													"value": "@pipeline().parameters.item.TableName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSynapseDatabase",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@pipeline().parameters.item.TableName",
													"type": "Expression"
												},
												"DbName": {
													"value": "@pipeline().parameters.item.DbName",
													"type": "Expression"
												},
												"SchemaName": "Delta"
											}
										}
									]
								},
								{
									"name": "Plex Create Table Or Merge Data",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Plex Raw Data Copy - SQL Pool",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Data Merge",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"item": {
												"value": "@pipeline().parameters.item",
												"type": "Expression"
											},
											"DateData": {
												"value": "@pipeline().parameters.EstDate",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Plex Raw Data Copy - ADLS2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "@{pipeline().parameters.item.SchemaName}.@{pipeline().parameters.item.TableName}"
										},
										{
											"name": "Destination",
											"value": "@{pipeline().parameters.item.FileSystem}/@{concat(pipeline().parameters.item.SchemaName, '/', pipeline().parameters.item.TableName, '/', pipeline().parameters.EstDate.firstRow.Year, '/', pipeline().parameters.EstDate.firstRow.Month, '/', pipeline().parameters.EstDate.firstRow.Day)}/@{concat(pipeline().parameters.item.TableName, '-', pipeline().parameters.EstDate.firstRow.EST)}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "OdbcSource",
											"query": {
												"value": "SELECT * FROM @{pipeline().parameters.item.SchemaName}.@{pipeline().parameters.item.TableName} t1 WHERE Updated_Date >= SUBSTRING('@{pipeline().parameters.item.LastRefreshStart}',1,23)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "PlexODBC",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": {
													"value": "@pipeline().parameters.item.SchemaName",
													"type": "Expression"
												},
												"TableName": {
													"value": "@pipeline().parameters.item.TableName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "SinkParquet",
											"type": "DatasetReference",
											"parameters": {
												"file_system": {
													"value": "@pipeline().parameters.item.FileSystem",
													"type": "Expression"
												},
												"directory": {
													"value": "@{pipeline().parameters.item.SchemaName}/@{pipeline().parameters.item.TableName}/@{pipeline().parameters.EstDate.firstRow.Year}/@{pipeline().parameters.EstDate.firstRow.Month}/@{pipeline().parameters.EstDate.firstRow.Day}",
													"type": "Expression"
												},
												"file_name": {
													"value": "@{pipeline().parameters.item.TableName}-@{pipeline().parameters.EstDate.firstRow.EST}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"item": {
						"type": "object"
					},
					"EstDate": {
						"type": "object"
					},
					"DataCount": {
						"type": "int"
					}
				},
				"folder": {
					"name": "Master Data/Slave Pipelines/Plex Data Refresh"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/PlexODBC')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSynapseDatabase')]",
				"[concat(variables('workspaceId'), '/pipelines/Data Merge')]",
				"[concat(variables('workspaceId'), '/datasets/SinkParquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseDatabase')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "modineerworkspace-WorkspaceDefaultSqlServer",
					"type": "LinkedServiceReference",
					"parameters": {
						"DBName": {
							"value": "@dataset().DbName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"TableName": {
						"type": "string"
					},
					"DbName": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/modineerworkspace-WorkspaceDefaultSqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GloviaProd')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GloviaData",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablename": {
						"type": "string"
					},
					"schemaname": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaname",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/GloviaData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Modineer')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {},
				"sqlPool": {
					"referenceName": "Modineer",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/Modineer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NetsuiteData')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"Schema": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				},
				"sqlPool": {
					"referenceName": "NetsuiteData",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/NetsuiteData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NetsuiteFileCabinet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "NetsuiteUnAuthorized",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"RelativeURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().RelativeURL",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/NetsuiteUnAuthorized')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NetsuiteODBCSource')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "NetsuiteODBC",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OdbcTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/NetsuiteODBC')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PlexODBC')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PlexODBC_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "OdbcTable",
				"schema": [],
				"typeProperties": {
					"tableName": {
						"value": "@{dataset().SchemaName}.@{dataset().TableName}",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/PlexODBC_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ReadParquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "modineerlake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileSystem": {
						"type": "string"
					},
					"FilePath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().FilePath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().FileSystem",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/modineerlake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SalesOrderCommonDatasetJSON')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Connection to your Azure Data Lake Store",
				"linkedServiceName": {
					"referenceName": "modineerworkspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string",
						"defaultValue": "unified-data-cluster"
					},
					"Directory": {
						"type": "string",
						"defaultValue": "sales-order-data"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "HTMSalesOrders.json",
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"encodingName": "UTF-8"
				},
				"schema": {
					"type": "object",
					"properties": {
						"subsidiary": {
							"type": "string"
						},
						"transNumber": {
							"type": "string"
						},
						"customer": {
							"type": "string"
						},
						"tranDate": {
							"type": "string"
						},
						"poNum": {
							"type": "string"
						},
						"shipComplete": {
							"type": "boolean"
						},
						"requestedShipDate": {
							"type": "string"
						},
						"actualShipDate": {
							"type": "string"
						},
						"item": {
							"type": "string"
						},
						"amount": {
							"type": "string"
						},
						"quantity": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/modineerworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SinkCSV')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "modineerlake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileSystem": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().FileSystem",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/modineerlake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SinkParquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "modineerlake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"file_system": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().file_system",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/modineerlake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/htmSalesOrderHeader')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [
					{
						"name": "abbrevtype",
						"type": "nvarchar"
					},
					{
						"name": "actualshipdate",
						"type": "date"
					},
					{
						"name": "balsegstatus",
						"type": "bit"
					},
					{
						"name": "billingaddress",
						"type": "int",
						"precision": 10
					},
					{
						"name": "billingstatus",
						"type": "bit"
					},
					{
						"name": "closedate",
						"type": "date"
					},
					{
						"name": "createdby",
						"type": "int",
						"precision": 10
					},
					{
						"name": "createddate",
						"type": "date"
					},
					{
						"name": "currency",
						"type": "int",
						"precision": 10
					},
					{
						"name": "custbodyht_asaporder_bodyfield",
						"type": "bit"
					},
					{
						"name": "custbodyht_boltobeprinted_tranbdy",
						"type": "bit"
					},
					{
						"name": "custbodyht_confirmto",
						"type": "nvarchar"
					},
					{
						"name": "custbodyht_customerscustomerpo_bdfield",
						"type": "int",
						"precision": 10
					},
					{
						"name": "custbodyht_ishistoricaltransaction",
						"type": "bit"
					},
					{
						"name": "custbodyht_numofshiplabelstoprint",
						"type": "int",
						"precision": 10
					},
					{
						"name": "custbodyht_ordersfulyscheduled_tranbdy",
						"type": "bit"
					},
					{
						"name": "custbodyht_shipper",
						"type": "nvarchar"
					},
					{
						"name": "custbodyhtfreightchargepreferences",
						"type": "int",
						"precision": 10
					},
					{
						"name": "custbodyhthaschangeorders",
						"type": "bit"
					},
					{
						"name": "custbodyhtproductiondate",
						"type": "date"
					},
					{
						"name": "daysopen",
						"type": "float",
						"precision": 15
					},
					{
						"name": "email",
						"type": "nvarchar"
					},
					{
						"name": "entity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "exchangerate",
						"type": "int",
						"precision": 10
					},
					{
						"name": "fax",
						"type": "nvarchar"
					},
					{
						"name": "foreigntotal",
						"type": "decimal",
						"precision": 25,
						"scale": 4
					},
					{
						"name": "id",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "includeinforecast",
						"type": "bit"
					},
					{
						"name": "isfinchrg",
						"type": "bit"
					},
					{
						"name": "isreversal",
						"type": "bit"
					},
					{
						"name": "lastmodifiedby",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "lastmodifieddate",
						"type": "date"
					},
					{
						"name": "memo",
						"type": "nvarchar"
					},
					{
						"name": "nexus",
						"type": "int",
						"precision": 10
					},
					{
						"name": "number",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ordpicked",
						"type": "bit"
					},
					{
						"name": "paymenthold",
						"type": "bit"
					},
					{
						"name": "posting",
						"type": "bit"
					},
					{
						"name": "printedpickingticket",
						"type": "bit"
					},
					{
						"name": "recordtype",
						"type": "nvarchar"
					},
					{
						"name": "shipcomplete",
						"type": "bit"
					},
					{
						"name": "shipdate",
						"type": "date"
					},
					{
						"name": "shippingaddress",
						"type": "int",
						"precision": 10
					},
					{
						"name": "source",
						"type": "nvarchar"
					},
					{
						"name": "status",
						"type": "char"
					},
					{
						"name": "terms",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "trandate",
						"type": "date"
					},
					{
						"name": "trandisplayname",
						"type": "nvarchar"
					},
					{
						"name": "tranid",
						"type": "nvarchar"
					},
					{
						"name": "transactionnumber",
						"type": "nvarchar"
					},
					{
						"name": "type",
						"type": "nvarchar"
					},
					{
						"name": "typebaseddocumentnumber",
						"type": "nvarchar"
					},
					{
						"name": "userevenuearrangement",
						"type": "bit"
					},
					{
						"name": "visibletocustomer",
						"type": "bit"
					},
					{
						"name": "void",
						"type": "bit"
					},
					{
						"name": "voided",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "htm",
					"table": "SalesOrderHeader"
				},
				"sqlPool": {
					"referenceName": "NetsuiteData",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/NetsuiteData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Glovia Reports')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "PowerBIWorkspace",
				"typeProperties": {
					"workspaceID": "07766c8f-f1c7-4227-a8e4-05b81ad1d804",
					"tenantID": "ea956f36-77a0-4634-9b11-803ca2beeac1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GloviaData')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Access to the Oracle server through a self hosted runtime.",
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('GloviaData_connectionString')]"
				},
				"connectVia": {
					"referenceName": "GloviaServerIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/GloviaServerIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HTM_NetSuite')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Service for HTM NetSuite",
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('HTM_NetSuite_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('HTM_NetSuite_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('HTM_NetSuite_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Legacy HTM Netsuite Refresh Token')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"account_id": {
						"type": "String",
						"defaultValue": "3675944"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('Legacy HTM Netsuite Refresh Token_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('Legacy HTM Netsuite Refresh Token_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Legacy HTM Netsuite Refresh Token_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ModineerSQLPool')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ModineerSQLPool_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ModineerTableStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureTableStorage",
				"typeProperties": {
					"connectionString": "[parameters('ModineerTableStorage_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Netsuite SuiteQL')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"accountid": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('Netsuite SuiteQL_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NetsuiteODBC')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "64 bit driver installed on svm02eset001",
				"annotations": [],
				"type": "Odbc",
				"typeProperties": {
					"connectionString": {
						"type": "SecureString",
						"value": "[parameters('NetsuiteODBC_connectionString')]"
					},
					"authenticationType": "Basic",
					"userName": "[parameters('NetsuiteODBC_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('NetsuiteODBC_password')]"
					}
				},
				"connectVia": {
					"referenceName": "GloviaServerIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/GloviaServerIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NetsuiteUnAuthorized')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('NetsuiteUnAuthorized_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PlexODBC_LS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "Odbc",
				"typeProperties": {
					"connectionString": {
						"type": "SecureString",
						"value": "[parameters('PlexODBC_LS_connectionString')]"
					},
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "GloviaServerIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/GloviaServerIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/modineerlake')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('modineerlake_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/modineerworkspace-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('modineerworkspace-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/modineerworkspace-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('modineerworkspace-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Data Refresh Trigger')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Data Refresh Delta",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2021-10-27T11:00:00",
						"timeZone": "Eastern Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Data Refresh Delta')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GloviaServerIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"description": "Integration runtime for the Glovia Server.\nRuntime to connect the Netsuite ODBC to to synapse.",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Legacy HTM Work Order Processing')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "modineerworkspace-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "modineerworkspace-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tabbrevtype as string,\n\t\tbalsegstatus as short,\n\t\tbillingstatus as boolean,\n\t\tclosedate as date,\n\t\tcommitted as boolean,\n\t\tcreatedby as short,\n\t\tcreateddate as date,\n\t\tcurrency as boolean,\n\t\tcustbodyhtallowworkorderclose as boolean,\n\t\tcustbodyhtisclosedworkorderbuildunbld as boolean,\n\t\tcustbodyhtproducionschedulewoline as integer,\n\t\tcustbodyhtproductionschedule as short,\n\t\tcustbodyhtsalesorder as integer,\n\t\tcustbodyhtsalesorderquantity as short,\n\t\tcustbodyhtworkorderttype as boolean,\n\t\tdaysopen as short,\n\t\tentity as short,\n\t\texchangerate as boolean,\n\t\tid as integer,\n\t\tincludeinforecast as boolean,\n\t\tisfinchrg as boolean,\n\t\tisreversal as boolean,\n\t\tlastmodifiedby as short,\n\t\tlastmodifieddate as date,\n\t\tnexus as boolean,\n\t\tnumber as integer,\n\t\tordpicked as boolean,\n\t\tpaymenthold as boolean,\n\t\tposting as boolean,\n\t\tpostingperiod as short,\n\t\tprintedpickingticket as boolean,\n\t\trecordtype as string,\n\t\tshipcomplete as boolean,\n\t\tstatus as string,\n\t\ttrandate as date,\n\t\ttrandisplayname as string,\n\t\ttranid as integer,\n\t\ttransactionnumber as integer,\n\t\ttype as string,\n\t\ttypebaseddocumentnumber as integer,\n\t\tuserevenuearrangement as boolean,\n\t\tvisibletocustomer as boolean,\n\t\tvoid as boolean,\n\t\tvoided as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['legacy-htm/work-order-headers','legacy-htm/2-processed-data/work-order-headers'],\n\tformat: 'json',\n\tfileSystem: 'unified-data-cluster',\n\tdocumentForm: 'documentPerLine',\n\tdateFormats: ['MM/dd/yyyy','MM-dd-yyyy','MM.dd.yyyy'],\n\ttimestampFormats: ['MM/dd/yyyy'],\n\tpreferredIntegralType: 'integer',\n\tpreferredFractionalType: 'double',\n\tbooleanFormat: ['true', 'false'],\n\twildcardPaths:['legacy-htm/work-order-headers/*']) ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'json',\n\tfileSystem: 'unified-data-cluster',\n\tfolderPath: 'legacy-htm/1-staged-data/work-order-headers',\n\ttruncate: true,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/modineerworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UpdateSQLTableFromParquet')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ReadParquet",
								"type": "DatasetReference"
							},
							"name": "NewData"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "modineerlake",
								"type": "LinkedServiceReference"
							},
							"name": "SinkToAzureTable"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"script": "parameters{\n\tSchemaName as string,\n\tTableName as string,\n\tKeyColumns as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tformat: 'parquet') ~> NewData\nNewData alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'unified-data-cluster',\n\tfolderPath: (concatWS('/',$SchemaName,$TableName,'Processed')),\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:(split($KeyColumns, ',')),\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tdateFormat:'MM/dd/yyyy',\n\ttimestampFormat:'MM/dd/yyyy HH:mm:ss',\n\tbooleanFormat: ['1', '0'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1) ~> SinkToAzureTable"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ReadParquet')]",
				"[concat(variables('workspaceId'), '/linkedServices/modineerlake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DynamicSQLMerge')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE PROCEDURE dbo.usp_DynamicMerge\n    @SchemaName NVARCHAR(25),\n    @TableName NVARCHAR(50),\n    @JoinStatement NVARCHAR(4000),\n    @keyColumns NVARCHAR(4000),\n    @keyColumnsSplit = NVARCHAR(4000)\n\nAS  \nSELECT *\nFROM sys.tables\n\nDECLARE @sql NVARCHAR(4000) = 'MERGE '+ @SchemaName +'.'+ @TableName + 'AS tgt  \nUSING delta.' +@TableName + ' as src\n    ON ' + @keyColumns + ' WHEN NOT MATCHED BY SOURCE \n    THEN DELETE\nWHEN MATCHED\n    THEN UPDATE SET tgt.Quantity = tgt.Quantity - src.OrderQty,\n                    tgt.ModifiedDate = GETDATE()  \nOUTPUT deleted.*, $action, inserted.* into'\nGO  \n\nEXECUTE sp_executesql   \n          N'SELECT * FROM AdventureWorksPDW2012.dbo.DimEmployee   \n          WHERE EmployeeKey = @level',  \n          N'@level TINYINT',  \n          @level = 109; \nGO\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ModineerServerless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/List Stored Procedures')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "General"
				},
				"content": {
					"query": "SELECT \n  ROUTINE_SCHEMA,\n  ROUTINE_NAME\nFROM INFORMATION_SCHEMA.ROUTINES\nWHERE ROUTINE_TYPE = 'PROCEDURE';",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Glovia",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT COUNT(*)\nFROM OPENROWSET(BULK 'https://modineerlake.blob.core.windows.net/unified-data-cluster/GLOVIA_PROD/JE_DET/NotProcessed/*.parquet',\n                FORMAT = 'PARQUET') AS ROWS\n\nSELECT *\nFROM OPENROWSET(\n    BULK 'https://modineerlake.blob.core.windows.net/unified-data-cluster/GLOVIA_PROD/JE_DET/Processed/',\n    FORMAT = 'delta') as rows;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'unified-data-cluster_modineerlake_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [unified-data-cluster_modineerlake_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://unified-data-cluster@modineerlake.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE GLOVIA_PROD.JE_DET (\t[JE_CCN] varchar(8000),\n\t[JE] varchar(8000),\n\t[JE_SUB] varchar(8000),\n\t[JE_LINE] varchar(8000),\n\t[GL_ACCT] varchar(8000),\n\t[CCN] varchar(8000),\n\t[ASOF_DATE] datetime2(7),\n\t[PCT] numeric(38,18),\n\t[QTY] numeric(38,18),\n\t[REF] varchar(8000),\n\t[SU] varchar(8000),\n\t[ASOF_YEAR] varchar(8000),\n\t[REVERSE_YEAR] varchar(8000),\n\t[MEMO] varchar(8000),\n\t[OVT] varchar(8000),\n\t[PA_COST_FLAG] varchar(8000),\n\t[PROJECT_ID] varchar(8000),\n\t[TASK_ID] varchar(8000),\n\t[GL_SL] varchar(8000),\n\t[GL_DL] varchar(8000),\n\t[DEBIT_AMT] numeric(38,18),\n\t[CREDIT_AMT] numeric(38,18),\n\t[USER_ALPHA1] varchar(8000),\n\t[USER_ALPHA2] varchar(8000),\n\t[USER_ALPHA3] varchar(8000),\n\t[USER_NUM1] numeric(38,18),\n\t[USER_NUM2] numeric(38,18),\n\t[USER_NUM3] numeric(38,18),\n\t[USER_DATE] datetime2(7),\n\t[USER_TIME] varchar(8000),\n\t[BANK] varchar(8000),\n\t[REF_SEQ] varchar(8000),\n\t[VAT] varchar(8000)\n\t)\n\tWITH (\n\tLOCATION = 'GLOVIA_PROD/JE_DET/JE_DET.parquet',\n\tDATA_SOURCE = [unified-data-cluster_modineerlake_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\nSELECT TOP 100 * FROM GLOVIA_PROD.JE_DET\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Modineer",
						"poolName": "Modineer"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Create a new stored procedure called 'AddTableToRefresh' in schema 'Config'\n-- Drop the stored procedure if it already exists\nIF EXISTS (\nSELECT *\n    FROM INFORMATION_SCHEMA.ROUTINES\nWHERE SPECIFIC_SCHEMA = N'Config'\n    AND SPECIFIC_NAME = N'AddTableToRefresh'\n    AND ROUTINE_TYPE = N'PROCEDURE'\n)\nDROP PROCEDURE Config.AddTableToRefresh\nGO\n-- Create the stored procedure in the specified schema\nCREATE PROCEDURE Config.AddTableToRefresh\n    @RowGroup NVARCHAR(50),\n    @DbName NVARCHAR(50),\n    @SchemaName NVARCHAR(50),\n    @TableName NVARCHAR(50),\n    @FileSystem NVARCHAR(50),\n    @TableKeysArray NVARCHAR(500),\n    @ConnectionType NVARCHAR(50),\n    @DataQuery NVARCHAR(4000),\n    @CurrentProcess BIT,\n    @TableMaxSCN NVARCHAR(20),\n    @RefreshInterval NVARCHAR(15),\n    @RefreshNumber INT,\n    @Columns NVARCHAR(2000)\n-- add more stored procedure parameters here\nAS\nBEGIN\n    -- body of the stored procedure\n    INSERT INTO Config.DataRefreshSchedule (RowGroup, DbName, SchemaName, TableName, FileSystem, TableKeysArray, ConnectionType, DataQuery)\n    VALUES(@RowGroup, @DbName, @SchemaName, @TableName, @FileSystem, @TableKeysArray, @ConnectionType, @DataQuery)\n\n    DECLARE @ScheduleId INT = (SELECT TOP 1  Id \n                                FROM Config.DataRefreshSchedule \n                                WHERE RowGroup = @RowGroup\n                                AND DbName = @DbName\n                                AND SchemaName = @SchemaName\n                                AND TableName = @TableName\n                                AND FileSystem = @FileSystem)\n    INSERT INTO Config.DataRefreshScheduleDetail (ScheduleId, CurrentProcess, TableMaxSCN, RefreshInterval, RefreshNumber)\n    VALUES(@ScheduleId, @CurrentProcess, @TableMaxSCN, @RefreshInterval, @RefreshNumber)\n\n    DECLARE @SchemaId INT = (SELECT schema_id FROM sys.schemas WHERE name = @SchemaName)\n\n    DECLARE @sql NVARCHAR(4000) = 'IF ((SELECT COUNT(*) FROM sys.tables WHERE name = @TableName AND schema_id = @SchemaId) > 0)\n    DROP TABLE [@SchemaName].[@TableName]\n\n    CREATE TABLE [@SchemaName].[@TableName]' + @Columns\n    SET @sql = REPLACE(@sql,'@SchemaName',@SchemaName)\n    SET @sql = REPLACE(@sql, '@TableName', @TableName)\n\n    EXEC sp_executesql @sql\nEND\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Modineer",
						"poolName": "Modineer"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 4')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'unified-data-cluster_modineerlake_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [unified-data-cluster_modineerlake_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://unified-data-cluster@modineerlake.dfs.core.windows.net' \n\t)\nGO\nCREATE EXTERNAL TABLE GloviaProd.CR_CNTDT (\n\t[SALES_CCN] nvarchar(1000),\n\t[CNT_NUM] nvarchar(1000),\n\t[CR_CNTDT_SEQ] nvarchar(1000),\n\t[REQD_DATE] datetime2(7),\n\t[REQD_TIME] nvarchar(1000),\n\t[DOCK] nvarchar(1000),\n\t[INBOUND_SEQ] nvarchar(1000),\n\t[REL_QTY_TYPE] nvarchar(1000),\n\t[CUM_ORDER_QTY] numeric(38,18),\n\t[DIS_ORDER_QTY] numeric(38,18),\n\t[QTY_QUAL] nvarchar(1000),\n\t[PER_QUAL] nvarchar(1000),\n\t[SHIP_QTY] numeric(38,18),\n\t[COMMIT_QTY] numeric(38,18),\n\t[CANC_QTY] numeric(38,18),\n\t[BO_QTY] numeric(38,18),\n\t[UNIT_PRICE] numeric(38,18),\n\t[LAST_PICK_SEQ] numeric(38,18),\n\t[EST_PARTS_AMT] numeric(38,18),\n\t[EST_TAX_AMT] numeric(38,18),\n\t[SHIP_PARTS_AMT] numeric(38,18),\n\t[SHIP_TAX_AMT] numeric(38,18),\n\t[DEL_ORD_NUM] nvarchar(1000),\n\t[DEL_DATE] datetime2(7),\n\t[DEL_TIME] nvarchar(1000),\n\t[SHIP_VAT_AMT] numeric(38,18),\n\t[PRICE_OVERRIDDEN] nvarchar(1000),\n\t[NC_REASON] nvarchar(1000),\n\t[CANC_REASON] nvarchar(1000),\n\t[BOOK_RATE] numeric(38,18),\n\t[BOOT_RATE_DIV] nvarchar(1000),\n\t[LAST_SHIP_SEQ] numeric(38,18),\n\t[LAST_PROF_INV] nvarchar(1000),\n\t[LAST_PROF_ASN] nvarchar(1000),\n\t[EST_BACKLOG_AMT] numeric(38,18),\n\t[SHIP_BACKLOG_AMT] numeric(38,18),\n\t[INBOUND_CNR_ITEM] nvarchar(1000),\n\t[INBOUND_CNR_REV] nvarchar(1000),\n\t[CONSIGNED_QTY] numeric(38,18),\n\t[CONSIGNMENT_LOC] nvarchar(1000),\n\t[CONSIGNMENT_BIN] nvarchar(1000),\n\t[USER_ALPHA1] nvarchar(1000),\n\t[USER_ALPHA2] nvarchar(1000),\n\t[USER_ALPHA3] nvarchar(1000),\n\t[USER_NUM1] numeric(38,18),\n\t[USER_NUM2] numeric(38,18),\n\t[USER_NUM3] numeric(38,18),\n\t[USER_DATE] datetime2(7),\n\t[USER_TIME] nvarchar(1000)\n\t)\n\tWITH (\n\tLOCATION = 'GLOVIA_PROD/CR_CNTDT/**',\n\tDATA_SOURCE = [unified-data-cluster_modineerlake_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM GloviaProd.CR_CNTDT\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ModineerServerless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 5')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "MERGE ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Modineer",
						"poolName": "Modineer"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 6')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'unified-data-cluster_modineerlake_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [unified-data-cluster_modineerlake_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://unified-data-cluster@modineerlake.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE delta.JE_DET (\n\t[JE_CCN] nvarchar(4000),\n\t[JE] nvarchar(4000),\n\t[JE_SUB] nvarchar(4000),\n\t[JE_LINE] nvarchar(4000),\n\t[GL_ACCT] nvarchar(4000),\n\t[CCN] nvarchar(4000),\n\t[ASOF_DATE] datetime2(7),\n\t[PCT] numeric(38,18),\n\t[QTY] numeric(38,18),\n\t[REF] nvarchar(4000),\n\t[SU] nvarchar(4000),\n\t[ASOF_YEAR] nvarchar(4000),\n\t[REVERSE_YEAR] nvarchar(4000),\n\t[MEMO] nvarchar(4000),\n\t[OVT] nvarchar(4000),\n\t[PA_COST_FLAG] nvarchar(4000),\n\t[PROJECT_ID] nvarchar(4000),\n\t[TASK_ID] nvarchar(4000),\n\t[GL_SL] nvarchar(4000),\n\t[GL_DL] nvarchar(4000),\n\t[DEBIT_AMT] numeric(38,18),\n\t[CREDIT_AMT] numeric(38,18),\n\t[USER_ALPHA1] nvarchar(4000),\n\t[USER_ALPHA2] nvarchar(4000),\n\t[USER_ALPHA3] nvarchar(4000),\n\t[USER_NUM1] numeric(38,18),\n\t[USER_NUM2] numeric(38,18),\n\t[USER_NUM3] numeric(38,18),\n\t[USER_DATE] datetime2(7),\n\t[USER_TIME] nvarchar(4000),\n\t[BANK] nvarchar(4000),\n\t[REF_SEQ] nvarchar(4000),\n\t[VAT] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'GLOVIA_PROD/JE_DET/NotProcessed/*.parquet',\n\tDATA_SOURCE = [unified-data-cluster_modineerlake_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\nSELECT COUNT(*)\nFROM delta.JE_DET",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ModineerServerless",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 7')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    COUNT(*)\nFROM\n    OPENROWSET(\n        BULK 'https://modineerlake.dfs.core.windows.net/unified-data-cluster/GLOVIA_PROD/JE_DET/*.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DeltaMerge')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "ModSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "5",
						"spark.autotune.trackingId": "75a8e2f8-5711-4cb8-a6a3-4e2391f12e3e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/94182533-145d-4aab-ac52-b1f4c605b8b0/resourceGroups/Modineer/providers/Microsoft.Synapse/workspaces/modineerworkspace/bigDataPools/ModSparkPool",
						"name": "ModSparkPool",
						"type": "Spark",
						"endpoint": "https://modineerworkspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ModSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"tags": [
								"parameters"
							]
						},
						"source": [
							"Schema = 'GLOVIA_PROD'\r\n",
							"Table = 'JE_DET'\r\n",
							"FilePath = 'unified-data-cluster'\r\n",
							"keyColumns = 'JE_CCN,JE,JE_DET,JE_LINE'\r\n",
							"updateString=''\r\n",
							"insertString=''"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"splitCols = keyColumns.split(',')\r\n",
							"matchedString = ''\r\n",
							"for string in splitCols:\r\n",
							"    matchString += 'src.' + string + ' = tgt.' + string + ', '\r\n",
							"matchedString = matchString.rstrip(', ')"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dfDataOrigionalPath = f\"abfss://{FilePath}@modineerlake.dfs.core.windows.net/{Schema}/{Table}/Processed/\"\r\n",
							"dfDataChangedPath = f\"abfss://{FilePath}@modineerlake.dfs.core.windows.net/{Schema}/{Table}/NotProcessed/\"\r\n",
							"dfDataOriginal = spark.read.load(dfDataOrigionalPath, format='delta')\r\n",
							"df.write.mode(\"overwrite\").saveAsTable(f\"delta.{Table}\")\r\n",
							"tgt = spark.table(f'delta.{Table}')\r\n",
							"src = spark.read.format(\"parquet\").load(dfDataChangedPath)\r\n",
							"src.registerTempTable(\"changed\")\r\n",
							"import delta\r\n",
							""
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(spark.sql(\"DESCRIBE HISTORY '\" + dfDataOrigionalPath +\"'\"))"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"orDT = delta.DeltaTable.forPath(spark, dfDataOrigionalPath)\r\n",
							"(\r\n",
							"    orDT\r\n",
							"        .alias(\"original\")\r\n",
							"        .merge(src.alias(\"changed\"),\r\n",
							"            matchedString)\r\n",
							"        .whenMatchedUpdate(set ={updateString})\r\n",
							"        .whenNotMatchedInsert(values ={insertString})\r\n",
							"        .execute()\r\n",
							")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 2')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "ModSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "cc1015e8-79e9-4b62-b99d-de377f935128"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/94182533-145d-4aab-ac52-b1f4c605b8b0/resourceGroups/Modineer/providers/Microsoft.Synapse/workspaces/modineerworkspace/bigDataPools/ModSparkPool",
						"name": "ModSparkPool",
						"type": "Spark",
						"endpoint": "https://modineerworkspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ModSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"sch = \"\"\r\n",
							"tbl = \"\""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Set location of the data\r\n",
							"loc = f\"/unified-data-cluster/{sch}/{tbl}\"\r\n",
							"df = (spark\r\n",
							"        .read\r\n",
							"        .parquet(loc))"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Modineer')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NetsuiteData')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		}
	]
}