{
	"name": "DeltaMerge",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ModSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "5",
				"spark.autotune.trackingId": "75a8e2f8-5711-4cb8-a6a3-4e2391f12e3e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/94182533-145d-4aab-ac52-b1f4c605b8b0/resourceGroups/Modineer/providers/Microsoft.Synapse/workspaces/modineerworkspace/bigDataPools/ModSparkPool",
				"name": "ModSparkPool",
				"type": "Spark",
				"endpoint": "https://modineerworkspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ModSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"Schema = 'GLOVIA_PROD'\r\n",
					"Table = 'JE_DET'\r\n",
					"FilePath = 'unified-data-cluster'\r\n",
					"keyColumns = 'JE_CCN,JE,JE_DET,JE_LINE'\r\n",
					"updateString=''\r\n",
					"insertString=''"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"splitCols = keyColumns.split(',')\r\n",
					"matchedString = ''\r\n",
					"for string in splitCols:\r\n",
					"    matchString += 'src.' + string + ' = tgt.' + string + ', '\r\n",
					"matchedString = matchString.rstrip(', ')"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfDataOrigionalPath = f\"abfss://{FilePath}@modineerlake.dfs.core.windows.net/{Schema}/{Table}/Processed/\"\r\n",
					"dfDataChangedPath = f\"abfss://{FilePath}@modineerlake.dfs.core.windows.net/{Schema}/{Table}/NotProcessed/\"\r\n",
					"dfDataOriginal = spark.read.load(dfDataOrigionalPath, format='delta')\r\n",
					"df.write.mode(\"overwrite\").saveAsTable(f\"delta.{Table}\")\r\n",
					"tgt = spark.table(f'delta.{Table}')\r\n",
					"src = spark.read.format(\"parquet\").load(dfDataChangedPath)\r\n",
					"src.registerTempTable(\"changed\")\r\n",
					"import delta\r\n",
					""
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(spark.sql(\"DESCRIBE HISTORY '\" + dfDataOrigionalPath +\"'\"))"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"orDT = delta.DeltaTable.forPath(spark, dfDataOrigionalPath)\r\n",
					"(\r\n",
					"    orDT\r\n",
					"        .alias(\"original\")\r\n",
					"        .merge(src.alias(\"changed\"),\r\n",
					"            matchedString)\r\n",
					"        .whenMatchedUpdate(set ={updateString})\r\n",
					"        .whenNotMatchedInsert(values ={insertString})\r\n",
					"        .execute()\r\n",
					")"
				],
				"execution_count": null
			}
		]
	}
}